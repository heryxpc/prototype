[kernel] preprocessing with "gcc -C -E -I.  ../benchmarks/original/gopan.c"
[value] Analyzing a complete application starting at main
[value] Computing initial state
[value] Initial state computed
[value] Values of globals at initialization
[value] Semantic level unrolling superposing up to 100 states
../benchmarks/original/gopan.c:5:[value] entering loop for the first time
../benchmarks/original/gopan.c:8:[value] assigning non deterministic value for the first time
../benchmarks/original/gopan.c:10:[kernel] warning: signed overflow. assert x+1 ≤ 2147483647;
../benchmarks/original/gopan.c:7:[kernel] warning: signed overflow. assert y+1 ≤ 2147483647;
../benchmarks/original/gopan.c:8:[kernel] warning: signed overflow. assert -2147483648 ≤ y-1;
../benchmarks/original/gopan.c:12:[kernel] warning: signed overflow. assert -2147483648 ≤ x+y;
[value] computing for function __assert_fail <- main.
        Called from ../benchmarks/original/gopan.c:12.
[kernel] warning: Neither code nor specification for function __assert_fail, generating default assigns from the prototype
[value] using specification for function __assert_fail
[value] Done for function __assert_fail
[value] computing for function __assert_fail <- main.
        Called from ../benchmarks/original/gopan.c:13.
[value] Done for function __assert_fail
[value] Recording results for main
[value] done for function main
[value] ====== VALUES COMPUTED ======
[value] Values at end of function main:
          x ∈ [-2147483648..102]
          y ∈ [-2147483648..-1]
          __retres ∈ {0}
/* Generated by Frama-C */
/*@ assigns \nothing; */
extern  __attribute__((__nothrow__, __noreturn__)) void __assert_fail(
char const *__assertion, char const *__file, unsigned int __line,
char const *__function) __attribute__((__leaf__));

int main(void)
{
  int __retres;
  int x;
  int y;
  x = 0;
  y = 0;
  while (1) {
    if (x <= 50) 
      /*@ assert Value: signed_overflow: y+1 ≤ 2147483647; */
      y ++;
    else 
      /*@ assert Value: signed_overflow: -2147483648 ≤ y-1; */
      y --;
    if (y < 0) break;
    /*@ assert Value: signed_overflow: x+1 ≤ 2147483647; */
    x ++;
  }
  /*@ assert Value: signed_overflow: -2147483648 ≤ x+y; */
  if (! (x + y <= 101)) __assert_fail("x+y<=101",
                                      "../benchmarks/original/gopan.c",
                                      (unsigned int)12,"main");
  if (! (x <= 102)) __assert_fail("x <= 102",
                                  "../benchmarks/original/gopan.c",
                                  (unsigned int)13,"main");
  __retres = 0;
  return __retres;
}


