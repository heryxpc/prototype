/* Generated by Frama-C */
/* compiler builtin: 
   void *__builtin_alloca(unsigned int);   */
/*@ assigns \nothing; */
extern  __attribute__((__noreturn__)) void __VERIFIER_error();

void __VERIFIER_assert(int cond)
{
  if (! cond) ERROR: __VERIFIER_error();
  return;
}

/*@ assigns \at(\result,Post) \from \nothing; */
extern unsigned int __VERIFIER_nondet_uint();

int main(void)
{
  int __retres;
  unsigned int SIZE;
  int i;
  int j;
  int k;
  int key;
  int *v;
  unsigned int __lengthofv;
  SIZE = __VERIFIER_nondet_uint();
  {
    /*undefined sequence*/
    __lengthofv = SIZE;
    v = (int *)__builtin_alloca(sizeof(*v) * __lengthofv);
  }
  j = 1;
  while ((unsigned int)j < SIZE) {
    /*@ assert Value: mem_access: \valid_read(v+j); */
    key = *(v + j);
    /*@ assert Value: signed_overflow: -2147483648 ≤ j-1; */
    i = j - 1;
    while (1) {
      if (i >= 0) {
        /*@ assert
            Value: ptr_comparison:
              \pointer_comparable((void *)*(v+i), (void *)key);
        */
        /*@ assert Value: mem_access: \valid_read(v+i); */
        if (! (*(v + i) > key)) break;
      }
      else break;
      if (i < 2) *(v + (i + 1)) = *(v + i);
      i --;
    }
    /*@ assert Value: mem_access: \valid(v+(int)(i+1)); */
    /*@ assert Value: signed_overflow: i+1 ≤ 2147483647; */
    *(v + (i + 1)) = key;
    /*@ assert Value: signed_overflow: j+1 ≤ 2147483647; */
    j ++;
  }
  k = 1;
  while ((unsigned int)k < SIZE) {
    /*@ assert Value: mem_access: \valid_read(v+(int)(k-1)); */
    /*@ assert
        Value: ptr_comparison:
          \pointer_comparable((void *)*(v+(int)(k-1)), (void *)*(v+k));
    */
    /*@ assert Value: mem_access: \valid_read(v+k); */
    /*@ assert Value: signed_overflow: -2147483648 ≤ k-1; */
    __VERIFIER_assert(*(v + (k - 1)) <= *(v + k));
    /*@ assert Value: signed_overflow: k+1 ≤ 2147483647; */
    k ++;
  }
  __retres = 0;
  return __retres;
}


